alloy:
  extraPorts:
    - name: "otelgrpc"
      port: 4317
      targetPort: 4317
      protocol: "TCP"
    - name: "otelhttp"
      port: 4318
      targetPort: 4318
      protocol: "TCP"

  configMap:
    content: |-
      discovery.kubernetes "pods" {
        role = "pod"
      }

      discovery.kubernetes "endpoints" {
        role = "endpoints"
      }

      discovery.relabel "pod_logs" {
        targets = discovery.kubernetes.pods.targets
        rule {
          source_labels = ["__meta_kubernetes_namespace"]
          target_label  = "namespace"
        }
        rule {
          source_labels = ["__meta_kubernetes_pod_name"]
          target_label  = "pod_name"
        }
        rule {
          source_labels = ["__meta_kubernetes_pod_label_app"]
          target_label  = "service_name"
        }
      }

      discovery.relabel "hackathon_microservices" {
        targets = discovery.kubernetes.endpoints.targets
        
        rule {
          source_labels = ["__meta_kubernetes_service_name"]
          regex = "fiap-hackathon-payment-api-service"
          target_label = "__metrics_path__"
          replacement = "/payment/actuator/prometheus"
        }
      }

      loki.source.kubernetes "pods" {
        targets    = discovery.relabel.pod_logs.output
        forward_to = [loki.process.add_labels.receiver]
      }

      loki.process "add_labels" {
        forward_to = [loki.write.loki_endpoint.receiver]
      }

      loki.write "loki_endpoint" {
        endpoint {
          url = "http://loki-distributor.monitoring:3100/loki/api/v1/push"
        }
      }

      otelcol.receiver.otlp "default" {
        http {
          endpoint = "0.0.0.0:4318"
        }
        grpc {
          endpoint = "0.0.0.0:4317"
        }
        output {
          traces = [otelcol.processor.batch.default.input]
        }
      }

      otelcol.processor.batch "default" {
        output {
          traces = [otelcol.exporter.otlp.tempo.input]
        }
      }

      otelcol.exporter.otlp "tempo" {
        client {
          endpoint = "tempo.monitoring.svc.cluster.local:4317"
          tls {
            insecure = true
          }
        }
      }

      prometheus.scrape "hackathon_microservices" {
        targets = discovery.relabel.hackathon_microservices.output
        forward_to = [prometheus.remote_write.prometheus.receiver]
        scrape_interval = "15s"
        job_name = "hackathon-microservices"
      }

      prometheus.remote_write "prometheus" {
        endpoint {
          url = "http://prometheus-server.monitoring.svc.cluster.local:9090/api/v1/write"
        }
      }