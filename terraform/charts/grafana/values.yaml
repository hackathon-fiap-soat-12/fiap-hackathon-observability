adminPassword: "hackathon"

envFromSecrets:
  - name: aws-credentials

datasources:
  datasources.yaml:
    apiVersion: 1
    datasources:
      - name: Loki
        type: loki
        url: http://loki-gateway.monitoring.svc.cluster.local:3100
        access: proxy
        uid: loki
        jsonData:
          derivedFields:
          - name: TraceID
            url: $$${__value.raw}
            matcherRegex: '"traceid":"([^"]+)"'
            datasourceUid: tempo

          - name: Pod Logs
            url: "/explore?left=%7B%22datasource%22:%22Loki%22,%22queries%22:%5B%7B%22expr%22:%22{pod_name=%5C%22$$${__field.pod_name}%5C%22}%22%7D%5D%7D"

      - name: Prometheus
        type: prometheus
        url: http://prometheus-server.monitoring.svc.cluster.local:9090
        access: proxy
        uid: prometheus

      - name: Tempo
        type: tempo
        url: http://tempo.monitoring.svc.cluster.local:3100
        access: proxy
        uid: tempo
        jsonData:
          tracesToLogsV2:
            datasourceUid: 'loki'
            spanStartTimeShift: '-1h'
            spanEndTimeShift: '1h'
            tags: ['job', 'instance', 'pod', 'namespace']
            filterByTraceID: false
            filterBySpanID: false
            customQuery: true
            query: '{$$${__tags}} |~ "$$${__span.traceid}"'
          # tracesToMetrics:
          #   datasourceUid: 'prometheus'
          #   spanStartTimeShift: '-1h'
          #   spanEndTimeShift: '1h'
          #   tags: [{ key: 'service.name', value: 'service' }, { key: 'job' }]
          #   queries:
          #     - name: 'Sample query'
          #       query: 'sum(rate(traces_spanmetrics_latency_bucket{$$$__tags}[5m]))'
          serviceMap:
            datasourceUid: 'prometheus'
          nodeGraph:
            enabled: true
          search:
            hide: false
          traceQuery:
            timeShiftEnabled: true
            spanStartTimeShift: '-1h'
            spanEndTimeShift: '1h'
          spanBar:
            type: 'Tag'
            tag: 'http.path'
          streamingEnabled:
            search: true
      
      - name: CloudWatch
        type: cloudwatch
        jsonData:
          authType: default
          defaultRegion: ${AWS_REGION}
        version: 1

grafana.ini:
  auth:
    anonymous:
      enabled: true
      org_name: "Main Org."
      org_role: "Viewer"
    disable_login_form: false

  server:
    root_url: "%(protocol)s://%(domain)s:%(http_port)s/grafana/"
    serve_from_sub_path: true
  security:
    allow_embedding: true
  http:
    allow_cors: true

ingress:
  enabled: true
  ingressClassName: "nginx"
  path: "/grafana"
  pathType: "Prefix"
  hosts:
    - ${ALB_DNS_NAME}